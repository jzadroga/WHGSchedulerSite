#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WHGScheduler.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WHGScheduler")]
	public partial class WHGSchedulerDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcomponent(component instance);
    partial void Updatecomponent(component instance);
    partial void Deletecomponent(component instance);
    partial void Insertstatus(status instance);
    partial void Updatestatus(status instance);
    partial void Deletestatus(status instance);
    partial void Insertmeeting(meeting instance);
    partial void Updatemeeting(meeting instance);
    partial void Deletemeeting(meeting instance);
    partial void InsertmeetingRequest(meetingRequest instance);
    partial void UpdatemeetingRequest(meetingRequest instance);
    partial void DeletemeetingRequest(meetingRequest instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void InsertuserRole(userRole instance);
    partial void UpdateuserRole(userRole instance);
    partial void DeleteuserRole(userRole instance);
    partial void Insertsponsor(sponsor instance);
    partial void Updatesponsor(sponsor instance);
    partial void Deletesponsor(sponsor instance);
    #endregion
		
		public WHGSchedulerDBDataContext() : 
				base(global::WHGScheduler.DataAccess.Properties.Settings.Default.WHGSchedulerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WHGSchedulerDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WHGSchedulerDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WHGSchedulerDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WHGSchedulerDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<component> components
		{
			get
			{
				return this.GetTable<component>();
			}
		}
		
		public System.Data.Linq.Table<status> status
		{
			get
			{
				return this.GetTable<status>();
			}
		}
		
		public System.Data.Linq.Table<meeting> meetings
		{
			get
			{
				return this.GetTable<meeting>();
			}
		}
		
		public System.Data.Linq.Table<meetingRequest> meetingRequests
		{
			get
			{
				return this.GetTable<meetingRequest>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<userRole> userRoles
		{
			get
			{
				return this.GetTable<userRole>();
			}
		}
		
		public System.Data.Linq.Table<sponsor> sponsors
		{
			get
			{
				return this.GetTable<sponsor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.component")]
	public partial class component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _componentID;
		
		private string _componentName;
		
		private EntitySet<status> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncomponentIDChanging(int value);
    partial void OncomponentIDChanged();
    partial void OncomponentNameChanging(string value);
    partial void OncomponentNameChanged();
    #endregion
		
		public component()
		{
			this._status = new EntitySet<status>(new Action<status>(this.attach_status), new Action<status>(this.detach_status));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_componentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int componentID
		{
			get
			{
				return this._componentID;
			}
			set
			{
				if ((this._componentID != value))
				{
					this.OncomponentIDChanging(value);
					this.SendPropertyChanging();
					this._componentID = value;
					this.SendPropertyChanged("componentID");
					this.OncomponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_componentName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string componentName
		{
			get
			{
				return this._componentName;
			}
			set
			{
				if ((this._componentName != value))
				{
					this.OncomponentNameChanging(value);
					this.SendPropertyChanging();
					this._componentName = value;
					this.SendPropertyChanged("componentName");
					this.OncomponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="component_status", Storage="_status", ThisKey="componentID", OtherKey="componentID")]
		public EntitySet<status> status
		{
			get
			{
				return this._status;
			}
			set
			{
				this._status.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_status(status entity)
		{
			this.SendPropertyChanging();
			entity.component = this;
		}
		
		private void detach_status(status entity)
		{
			this.SendPropertyChanging();
			entity.component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.status")]
	public partial class status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _statusID;
		
		private string _statusName;
		
		private int _componentID;
		
		private EntitySet<meeting> _meetings;
		
		private EntitySet<user> _users;
		
		private EntitySet<sponsor> _sponsors;
		
		private EntityRef<component> _component;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnstatusNameChanging(string value);
    partial void OnstatusNameChanged();
    partial void OncomponentIDChanging(int value);
    partial void OncomponentIDChanged();
    #endregion
		
		public status()
		{
			this._meetings = new EntitySet<meeting>(new Action<meeting>(this.attach_meetings), new Action<meeting>(this.detach_meetings));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._sponsors = new EntitySet<sponsor>(new Action<sponsor>(this.attach_sponsors), new Action<sponsor>(this.detach_sponsors));
			this._component = default(EntityRef<component>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string statusName
		{
			get
			{
				return this._statusName;
			}
			set
			{
				if ((this._statusName != value))
				{
					this.OnstatusNameChanging(value);
					this.SendPropertyChanging();
					this._statusName = value;
					this.SendPropertyChanged("statusName");
					this.OnstatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_componentID", DbType="Int NOT NULL")]
		public int componentID
		{
			get
			{
				return this._componentID;
			}
			set
			{
				if ((this._componentID != value))
				{
					if (this._component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncomponentIDChanging(value);
					this.SendPropertyChanging();
					this._componentID = value;
					this.SendPropertyChanged("componentID");
					this.OncomponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_meeting", Storage="_meetings", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<meeting> meetings
		{
			get
			{
				return this._meetings;
			}
			set
			{
				this._meetings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_user", Storage="_users", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_sponsor", Storage="_sponsors", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<sponsor> sponsors
		{
			get
			{
				return this._sponsors;
			}
			set
			{
				this._sponsors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="component_status", Storage="_component", ThisKey="componentID", OtherKey="componentID", IsForeignKey=true)]
		public component component
		{
			get
			{
				return this._component.Entity;
			}
			set
			{
				component previousValue = this._component.Entity;
				if (((previousValue != value) 
							|| (this._component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._component.Entity = null;
						previousValue.status.Remove(this);
					}
					this._component.Entity = value;
					if ((value != null))
					{
						value.status.Add(this);
						this._componentID = value.componentID;
					}
					else
					{
						this._componentID = default(int);
					}
					this.SendPropertyChanged("component");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_meetings(meeting entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_meetings(meeting entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_sponsors(sponsor entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_sponsors(sponsor entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.meeting")]
	public partial class meeting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _meetingID;
		
		private string _title;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private int _availableRequests;
		
		private int _sponsorID;
		
		private System.DateTime _dateCreated;
		
		private int _statusID;
		
		private EntitySet<meetingRequest> _meetingRequests;
		
		private EntityRef<status> _status;
		
		private EntityRef<sponsor> _sponsor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmeetingIDChanging(int value);
    partial void OnmeetingIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnavailableRequestsChanging(int value);
    partial void OnavailableRequestsChanged();
    partial void OnsponsorIDChanging(int value);
    partial void OnsponsorIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    #endregion
		
		public meeting()
		{
			this._meetingRequests = new EntitySet<meetingRequest>(new Action<meetingRequest>(this.attach_meetingRequests), new Action<meetingRequest>(this.detach_meetingRequests));
			this._status = default(EntityRef<status>);
			this._sponsor = default(EntityRef<sponsor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meetingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int meetingID
		{
			get
			{
				return this._meetingID;
			}
			set
			{
				if ((this._meetingID != value))
				{
					this.OnmeetingIDChanging(value);
					this.SendPropertyChanging();
					this._meetingID = value;
					this.SendPropertyChanged("meetingID");
					this.OnmeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_availableRequests", DbType="Int NOT NULL")]
		public int availableRequests
		{
			get
			{
				return this._availableRequests;
			}
			set
			{
				if ((this._availableRequests != value))
				{
					this.OnavailableRequestsChanging(value);
					this.SendPropertyChanging();
					this._availableRequests = value;
					this.SendPropertyChanged("availableRequests");
					this.OnavailableRequestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sponsorID", DbType="Int NOT NULL")]
		public int sponsorID
		{
			get
			{
				return this._sponsorID;
			}
			set
			{
				if ((this._sponsorID != value))
				{
					if (this._sponsor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsponsorIDChanging(value);
					this.SendPropertyChanging();
					this._sponsorID = value;
					this.SendPropertyChanged("sponsorID");
					this.OnsponsorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="meeting_meetingRequest", Storage="_meetingRequests", ThisKey="meetingID", OtherKey="meetingID")]
		public EntitySet<meetingRequest> meetingRequests
		{
			get
			{
				return this._meetingRequests;
			}
			set
			{
				this._meetingRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_meeting", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.meetings.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.meetings.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sponsor_meeting", Storage="_sponsor", ThisKey="sponsorID", OtherKey="sponsorID", IsForeignKey=true)]
		public sponsor sponsor
		{
			get
			{
				return this._sponsor.Entity;
			}
			set
			{
				sponsor previousValue = this._sponsor.Entity;
				if (((previousValue != value) 
							|| (this._sponsor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sponsor.Entity = null;
						previousValue.meetings.Remove(this);
					}
					this._sponsor.Entity = value;
					if ((value != null))
					{
						value.meetings.Add(this);
						this._sponsorID = value.sponsorID;
					}
					else
					{
						this._sponsorID = default(int);
					}
					this.SendPropertyChanged("sponsor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_meetingRequests(meetingRequest entity)
		{
			this.SendPropertyChanging();
			entity.meeting = this;
		}
		
		private void detach_meetingRequests(meetingRequest entity)
		{
			this.SendPropertyChanging();
			entity.meeting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.meetingRequest")]
	public partial class meetingRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _meetingRequestID;
		
		private int _userID;
		
		private int _meetingID;
		
		private System.DateTime _dateCreated;
		
		private EntityRef<meeting> _meeting;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmeetingRequestIDChanging(int value);
    partial void OnmeetingRequestIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnmeetingIDChanging(int value);
    partial void OnmeetingIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    #endregion
		
		public meetingRequest()
		{
			this._meeting = default(EntityRef<meeting>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meetingRequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int meetingRequestID
		{
			get
			{
				return this._meetingRequestID;
			}
			set
			{
				if ((this._meetingRequestID != value))
				{
					this.OnmeetingRequestIDChanging(value);
					this.SendPropertyChanging();
					this._meetingRequestID = value;
					this.SendPropertyChanged("meetingRequestID");
					this.OnmeetingRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meetingID", DbType="Int NOT NULL")]
		public int meetingID
		{
			get
			{
				return this._meetingID;
			}
			set
			{
				if ((this._meetingID != value))
				{
					if (this._meeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmeetingIDChanging(value);
					this.SendPropertyChanging();
					this._meetingID = value;
					this.SendPropertyChanged("meetingID");
					this.OnmeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="meeting_meetingRequest", Storage="_meeting", ThisKey="meetingID", OtherKey="meetingID", IsForeignKey=true)]
		public meeting meeting
		{
			get
			{
				return this._meeting.Entity;
			}
			set
			{
				meeting previousValue = this._meeting.Entity;
				if (((previousValue != value) 
							|| (this._meeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._meeting.Entity = null;
						previousValue.meetingRequests.Remove(this);
					}
					this._meeting.Entity = value;
					if ((value != null))
					{
						value.meetingRequests.Add(this);
						this._meetingID = value.meetingID;
					}
					else
					{
						this._meetingID = default(int);
					}
					this.SendPropertyChanged("meeting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_meetingRequest", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.meetingRequests.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.meetingRequests.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _email;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _password;
		
		private System.DateTime _dateCreated;
		
		private int _statusID;
		
		private int _roleID;
		
		private string _attendeeType;
		
		private string _brands;
		
		private string _title;
		
		private string _location;
		
		private string _businessPhone;
		
		private string _mobilePhone;
		
		private string _comments;
		
		private EntitySet<meetingRequest> _meetingRequests;
		
		private EntityRef<status> _status;
		
		private EntityRef<userRole> _userRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnattendeeTypeChanging(string value);
    partial void OnattendeeTypeChanged();
    partial void OnbrandsChanging(string value);
    partial void OnbrandsChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnbusinessPhoneChanging(string value);
    partial void OnbusinessPhoneChanged();
    partial void OnmobilePhoneChanging(string value);
    partial void OnmobilePhoneChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    #endregion
		
		public user()
		{
			this._meetingRequests = new EntitySet<meetingRequest>(new Action<meetingRequest>(this.attach_meetingRequests), new Action<meetingRequest>(this.detach_meetingRequests));
			this._status = default(EntityRef<status>);
			this._userRole = default(EntityRef<userRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL")]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._userRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attendeeType", DbType="NVarChar(250)")]
		public string attendeeType
		{
			get
			{
				return this._attendeeType;
			}
			set
			{
				if ((this._attendeeType != value))
				{
					this.OnattendeeTypeChanging(value);
					this.SendPropertyChanging();
					this._attendeeType = value;
					this.SendPropertyChanged("attendeeType");
					this.OnattendeeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brands", DbType="NVarChar(250)")]
		public string brands
		{
			get
			{
				return this._brands;
			}
			set
			{
				if ((this._brands != value))
				{
					this.OnbrandsChanging(value);
					this.SendPropertyChanging();
					this._brands = value;
					this.SendPropertyChanged("brands");
					this.OnbrandsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(500)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_businessPhone", DbType="NVarChar(50)")]
		public string businessPhone
		{
			get
			{
				return this._businessPhone;
			}
			set
			{
				if ((this._businessPhone != value))
				{
					this.OnbusinessPhoneChanging(value);
					this.SendPropertyChanging();
					this._businessPhone = value;
					this.SendPropertyChanged("businessPhone");
					this.OnbusinessPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobilePhone", DbType="NVarChar(50)")]
		public string mobilePhone
		{
			get
			{
				return this._mobilePhone;
			}
			set
			{
				if ((this._mobilePhone != value))
				{
					this.OnmobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._mobilePhone = value;
					this.SendPropertyChanged("mobilePhone");
					this.OnmobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="NVarChar(MAX)")]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_meetingRequest", Storage="_meetingRequests", ThisKey="userID", OtherKey="userID")]
		public EntitySet<meetingRequest> meetingRequests
		{
			get
			{
				return this._meetingRequests;
			}
			set
			{
				this._meetingRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_user", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.users.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userRole_user", Storage="_userRole", ThisKey="roleID", OtherKey="userRoleID", IsForeignKey=true)]
		public userRole userRole
		{
			get
			{
				return this._userRole.Entity;
			}
			set
			{
				userRole previousValue = this._userRole.Entity;
				if (((previousValue != value) 
							|| (this._userRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userRole.Entity = null;
						previousValue.users.Remove(this);
					}
					this._userRole.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._roleID = value.userRoleID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("userRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_meetingRequests(meetingRequest entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_meetingRequests(meetingRequest entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userRole")]
	public partial class userRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userRoleID;
		
		private string _role;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserRoleIDChanging(int value);
    partial void OnuserRoleIDChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public userRole()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userRoleID
		{
			get
			{
				return this._userRoleID;
			}
			set
			{
				if ((this._userRoleID != value))
				{
					this.OnuserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._userRoleID = value;
					this.SendPropertyChanged("userRoleID");
					this.OnuserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userRole_user", Storage="_users", ThisKey="userRoleID", OtherKey="roleID")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.userRole = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.userRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sponsor")]
	public partial class sponsor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sponsorID;
		
		private string _name;
		
		private string _logoImage;
		
		private string _title;
		
		private string _description;
		
		private int _statusID;
		
		private System.DateTime _dateCreated;
		
		private System.DateTime _dateModified;
		
		private string _websiteUrl;
		
		private string _email;
		
		private EntitySet<meeting> _meetings;
		
		private EntityRef<status> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsponsorIDChanging(int value);
    partial void OnsponsorIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlogoImageChanging(string value);
    partial void OnlogoImageChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OndateModifiedChanging(System.DateTime value);
    partial void OndateModifiedChanged();
    partial void OnwebsiteUrlChanging(string value);
    partial void OnwebsiteUrlChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public sponsor()
		{
			this._meetings = new EntitySet<meeting>(new Action<meeting>(this.attach_meetings), new Action<meeting>(this.detach_meetings));
			this._status = default(EntityRef<status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sponsorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sponsorID
		{
			get
			{
				return this._sponsorID;
			}
			set
			{
				if ((this._sponsorID != value))
				{
					this.OnsponsorIDChanging(value);
					this.SendPropertyChanging();
					this._sponsorID = value;
					this.SendPropertyChanged("sponsorID");
					this.OnsponsorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logoImage", DbType="NVarChar(250)")]
		public string logoImage
		{
			get
			{
				return this._logoImage;
			}
			set
			{
				if ((this._logoImage != value))
				{
					this.OnlogoImageChanging(value);
					this.SendPropertyChanging();
					this._logoImage = value;
					this.SendPropertyChanged("logoImage");
					this.OnlogoImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModified", DbType="DateTime NOT NULL")]
		public System.DateTime dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this.OndateModifiedChanging(value);
					this.SendPropertyChanging();
					this._dateModified = value;
					this.SendPropertyChanged("dateModified");
					this.OndateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_websiteUrl", DbType="NVarChar(250)")]
		public string websiteUrl
		{
			get
			{
				return this._websiteUrl;
			}
			set
			{
				if ((this._websiteUrl != value))
				{
					this.OnwebsiteUrlChanging(value);
					this.SendPropertyChanging();
					this._websiteUrl = value;
					this.SendPropertyChanged("websiteUrl");
					this.OnwebsiteUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(MAX)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sponsor_meeting", Storage="_meetings", ThisKey="sponsorID", OtherKey="sponsorID")]
		public EntitySet<meeting> meetings
		{
			get
			{
				return this._meetings;
			}
			set
			{
				this._meetings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_sponsor", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.sponsors.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.sponsors.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_meetings(meeting entity)
		{
			this.SendPropertyChanging();
			entity.sponsor = this;
		}
		
		private void detach_meetings(meeting entity)
		{
			this.SendPropertyChanging();
			entity.sponsor = null;
		}
	}
}
#pragma warning restore 1591
